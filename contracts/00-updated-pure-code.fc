() withdraw(slice s_addr, slice in_msg) impure {
  slice ds = get_data().begin_parse();
  var (owner_wc, owner_addr) = (ds~load_int(8), ds~load_uint(256));
  ds.end_parse();
  var (sender_wc, sender_addr) = s_addr.parse_std_addr();
  throw_unless(36, owner_wc = sender_wc);
  throw_unless(37, owner_addr = sender_addr);
  while (in_msg.slice_refs()) {
    var mode = in_msg~load_uint(8);
    send_raw_message(in_msg~load_ref(), mode);
  }
  in_msg.end_parse();
}

() recv_internal(cell in_msg_cell, slice in_msg) impure {
  var cs = in_msg_cell.begin_parse();
  var flags = cs~load_uint(4); 
  if (flags & 1) {
    return ();
  }
  var s_addr = cs~load_msg_addr();
  if (in_msg.slice_empty?()) {
    return ();
  }
  int op = in_msg~load_uint(32);
  if (op == 0) {
    return ();
  }
  int query_id = in_msg~load_uint(64);

  if (op == 0xaaeeee) {
    slice ds = get_data().begin_parse();
    if (ds.slice_empty?()) {
      var (owner_wc, owner_addr) = s_addr.parse_std_addr();
      set_data(begin_cell()
        .store_int(owner_wc, 8)
        .store_uint(owner_addr, 256)
      .end_cell());
    }
    ds.end_parse();
    return withdraw(s_addr, in_msg);
  }
  return ();
}

